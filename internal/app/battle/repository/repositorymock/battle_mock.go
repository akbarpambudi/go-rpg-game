// Code generated by MockGen. DO NOT EDIT.
// Source: battle.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	entity "github.com/akbarpambudi/go-rpg-game/internal/app/entity"
	predicate "github.com/akbarpambudi/go-rpg-game/internal/app/entity/predicate"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBattle is a mock of Battle interface
type MockBattle struct {
	ctrl     *gomock.Controller
	recorder *MockBattleMockRecorder
}

// MockBattleMockRecorder is the mock recorder for MockBattle
type MockBattleMockRecorder struct {
	mock *MockBattle
}

// NewMockBattle creates a new mock instance
func NewMockBattle(ctrl *gomock.Controller) *MockBattle {
	mock := &MockBattle{ctrl: ctrl}
	mock.recorder = &MockBattleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBattle) EXPECT() *MockBattleMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockBattle) CreateOrUpdate(ctx context.Context, battle *entity.BattleSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, battle)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockBattleMockRecorder) CreateOrUpdate(ctx, battle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockBattle)(nil).CreateOrUpdate), ctx, battle)
}

// LoadByID mocks base method
func (m *MockBattle) LoadByID(ctx context.Context, id uint) (*entity.BattleSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByID", ctx, id)
	ret0, _ := ret[0].(*entity.BattleSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByID indicates an expected call of LoadByID
func (mr *MockBattleMockRecorder) LoadByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByID", reflect.TypeOf((*MockBattle)(nil).LoadByID), ctx, id)
}

// LoadMany mocks base method
func (m *MockBattle) LoadMany(ctx context.Context, predicate predicate.BattleSession) ([]*entity.BattleSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMany", ctx, predicate)
	ret0, _ := ret[0].([]*entity.BattleSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMany indicates an expected call of LoadMany
func (mr *MockBattleMockRecorder) LoadMany(ctx, predicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMany", reflect.TypeOf((*MockBattle)(nil).LoadMany), ctx, predicate)
}

// RemoveByID mocks base method
func (m *MockBattle) RemoveByID(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByID indicates an expected call of RemoveByID
func (mr *MockBattleMockRecorder) RemoveByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByID", reflect.TypeOf((*MockBattle)(nil).RemoveByID), ctx, id)
}
